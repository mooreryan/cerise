name: Build and Test

on:
  push:
    branches:
      - 'main'
      - 'staging'
  pull_request:
    branches:
      - '*'

env:
  PROGRAM_NAME: cerise

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
        ocaml-compiler:
          - 4.13.1

    runs-on: ${{ matrix.os }}

    steps:
      - run: echo "LOCAL_BIN=$HOME/.local/bin" >> $GITHUB_ENV
      - run: echo "MMSEQS_EXE=$LOCAL_BIN/mmseqs" >> $GITHUB_ENV

      - name: Setup path
        run: |
          mkdir -p "$LOCAL_BIN"
          echo "$LOCAL_BIN" >> $GITHUB_PATH

      - name: Download MMseqs2 (Linux)
        run: |
          wget https://mmseqs.com/latest/mmseqs-linux-avx2.tar.gz; tar xvfz mmseqs-linux-avx2.tar.gz; mv $(pwd)/mmseqs/bin/mmseqs "$MMSEQS_EXE"
        if: matrix.os == 'ubuntu-latest'

      - name: Download MMseqs2 (MacOS)
        run: |
          wget https://mmseqs.com/latest/mmseqs-osx-universal.tar.gz; tar xvfz mmseqs-osx-universal.tar.gz; mv $(pwd)/mmseqs/bin/mmseqs "$MMSEQS_EXE"
        if: matrix.os == 'macos-latest'

      - name: Check MMseqs2
        run: |
          chmod 755 "$MMSEQS_EXE"
          mmseqs -h

      - name: Install BLAST (Linux)
        run: |
          wget https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.12.0+-x64-linux.tar.gz
          tar xzf ncbi-blast-2.12.0+-x64-linux.tar.gz
          mv ncbi-blast-2.12.0+/bin/* "$LOCAL_BIN"
        if: matrix.os == 'ubuntu-latest'

      - name: Install BLAST (MacOS)
        run: |
          wget https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.12.0+-x64-macosx.tar.gz;
          tar xzf ncbi-blast-2.12.0+-x64-macosx.tar.gz;
          mv ncbi-blast-2.12.0+/bin/* "$LOCAL_BIN"
        if: matrix.os == 'macos-latest'

      - name: Check BLAST
        run: |
          makeblastdb -h
          blastp -h

      - name: Install Diamond (Linux)
        run: |
          wget http://github.com/bbuchfink/diamond/releases/download/v2.0.13/diamond-linux64.tar.gz;
          tar xzf diamond-linux64.tar.gz;
          mv diamond "$LOCAL_BIN"
        if: matrix.os == 'ubuntu-latest'

      - name: Install Diamond (MacOS)
        run: |
          wget http://github.com/bbuchfink/diamond/archive/v2.0.13.tar.gz;
          tar xzf v2.0.13.tar.gz;
          cd diamond-2.0.13;
          mkdir bin;
          cd bin;
          cmake -DCMAKE_INSTALL_PREFIX=$HOME ..;
          make -j4;
          sudo make install
        if: matrix.os == 'macos-latest'

      - name: Check Diamond
        run: "diamond help"

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          dune-cache: true
          cache-prefix: v1-${{ matrix.os }}

      - name: Update opam
        run: "opam update"

      - name: Install Cerise OCaml deps
        run: opam exec -- opam install ./cerise --deps-only --with-doc --with-test

      - name: Install CommandRunner OCaml deps
        run: opam exec -- opam install ./command_runner --deps-only --with-doc --with-test

      - name: Build
        run: opam exec -- make build

      - name: Test
        run: opam exec -- make test

      - run: opam exec -- make send_coverage
        if: matrix.ocaml-compiler == '4.13.1' && matrix.os == 'ubuntu-latest'
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: opam exec -- make build_release

      - name: Upload the build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROGRAM_NAME }}-${{ matrix.os }}
          path: _build/install/default/bin/${{ env.PROGRAM_NAME }}
